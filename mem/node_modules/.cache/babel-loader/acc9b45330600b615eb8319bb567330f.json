{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabil\\\\Documents\\\\Fullstack\\\\ReactJS\\\\memory\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nconst SIDE = 7;\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.cards = this.generateCards();\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  }\n\n  handleCardClick(card) {\n    console.log(card, 'clicked');\n  }\n\n  render() {\n    const won = new Date().getSeconds() % 2 === 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"memory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(GuessCount, {\n      guesses: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }), this.cards.map(card => /*#__PURE__*/React.createElement(Card, {\n      card: card,\n      feedback: \"visible\",\n      onClick: this.handleCardClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    })), won && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, \"GAGN\\xE9 !!!\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Nabil/Documents/Fullstack/ReactJS/memory/src/App.js"],"names":["React","Component","shuffle","Card","GuessCount","SIDE","SYMBOLS","App","cards","generateCards","result","size","candidates","length","card","pop","push","handleCardClick","console","log","render","won","Date","getSeconds","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,WAAP;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB,KAAKC,aAAL,EADkB;AAAA;;AAG1BA,EAAAA,aAAa,GAAG;AACd,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGN,IAAI,GAAGA,IAApB;AACA,UAAMO,UAAU,GAAGV,OAAO,CAACI,OAAD,CAA1B;;AACA,WAAOI,MAAM,CAACG,MAAP,GAAgBF,IAAvB,EAA6B;AAC3B,YAAMG,IAAI,GAAGF,UAAU,CAACG,GAAX,EAAb;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAYF,IAAZ,EAAkBA,IAAlB;AACD;;AACD,WAAOZ,OAAO,CAACQ,MAAD,CAAd;AACD;;AAEDO,EAAAA,eAAe,CAACH,IAAD,EAAO;AACpBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkB,SAAlB;AACD;;AACDM,EAAAA,MAAM,GAAG;AACP,UAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,UAAX,KAA0B,CAA1B,KAAgC,CAA5C;AACA,wBACA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKf,KAAL,CAAWgB,GAAX,CAAeV,IAAI,iBAClB,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAkB,MAAA,QAAQ,EAAC,SAA3B;AAAqC,MAAA,OAAO,EAAE,KAAKG,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,EAKGI,GAAG,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALV,CADA;AASD;;AA5ByB;;AA+B5B,eAAed,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\n\nconst SIDE = 7\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\n\nclass App extends Component {\n  cards = this.generateCards()\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  handleCardClick(card) {\n    console.log(card, 'clicked')\n  }\n  render() {\n    const won = new Date().getSeconds() % 2 === 0\n    return (\n    <div className=\"memory\">\n      <GuessCount guesses={0} />\n      {this.cards.map(card => (\n        <Card card={card} feedback=\"visible\" onClick={this.handleCardClick}/>\n      ))}\n      {won && <p>GAGNé !!!</p>}\n    </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}