{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabil\\\\Documents\\\\Fullstack\\\\ReactJS\\\\cours\\\\formation\\\\memory\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame, { FAKE_HOF } from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\nconst SIDE = 6;\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿';\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      hallOfFame: null,\n      matchedCardIndices: []\n    };\n\n    this.displayHallOfFame = hallOfFame => {\n      this.setState({\n        hallOfFame\n      });\n    };\n\n    this.handleCardClick = index => {\n      const {\n        currentPair\n      } = this.state;\n\n      if (currentPair.length === 2) {\n        return;\n      }\n\n      if (currentPair.length === 0) {\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      }\n\n      this.handleNewPairClosedBy(index);\n    };\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const {\n      currentPair,\n      matchedCardIndices\n    } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  } // Arrow fx for binding\n\n\n  handleNewPairClosedBy(index) {\n    const {\n      cards,\n      currentPair,\n      guesses,\n      matchedCardIndices\n    } = this.state;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({\n      currentPair: newPair,\n      guesses: newGuesses\n    });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const {\n      cards,\n      guesses,\n      matchedCardIndices,\n      hallOfFame\n    } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"memory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(GuessCount, {\n      guesses: guesses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }), cards.map((card, index) => /*#__PURE__*/React.createElement(Card, {\n      card: card,\n      feedback: this.getFeedbackForCard(index),\n      key: index,\n      index: index,\n      onClick: this.handleCardClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    })), won && (hallOfFame ? /*#__PURE__*/React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Nabil/Documents/Fullstack/ReactJS/cours/formation/memory/src/App.js"],"names":["React","Component","shuffle","Card","GuessCount","HallOfFame","FAKE_HOF","HighScoreInput","SIDE","SYMBOLS","VISUAL_PAUSE_MSECS","App","state","cards","generateCards","currentPair","guesses","hallOfFame","matchedCardIndices","displayHallOfFame","setState","handleCardClick","index","length","handleNewPairClosedBy","result","size","candidates","card","pop","push","getFeedbackForCard","indexMatched","includes","newPair","newGuesses","matched","setTimeout","render","won","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\nimport HighScoreInput from './HighScoreInput';\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n  state = {\n  cards: this.generateCards(),\n  currentPair: [],\n  guesses: 0,\n  hallOfFame: null,\n  matchedCardIndices: [],\n  }\n\n  // Arrow fx for binding\n  displayHallOfFame = hallOfFame => {\n    this.setState({ hallOfFame })\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n  \n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n  \n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  // Arrow fx for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair]})\n    }\n    setTimeout(() => this.setState({currentPair: []}), VISUAL_PAUSE_MSECS)\n  }\n\n  render() {\n    const { cards, guesses, matchedCardIndices, hallOfFame } = this.state\n    const won = matchedCardIndices.length === cards.length\n    return (\n    <div className=\"memory\">\n      <GuessCount guesses={guesses} />\n      {cards.map((card, index) => (\n        <Card card={card} feedback={this.getFeedbackForCard(index)} key={index} index={index} onClick={this.handleCardClick}/>\n      ))}\n      {won && (\n        hallOfFame ? (\n          <HallOfFame entries={hallOfFame}/>\n       ) : (\n          <HighScoreInput \n            guesses={guesses}\n            onStored={this.displayHallOfFame}\n          />)\n      )}\n    </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}