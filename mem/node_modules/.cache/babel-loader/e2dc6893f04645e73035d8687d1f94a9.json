{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabil\\\\Documents\\\\Fullstack\\\\ReactJS\\\\cours\\\\formation\\\\memory\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame, { FAKE_HOF } from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\nconst SIDE = 6;\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø';\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      matchedCardIndices: []\n    };\n\n    this.handleCardClick = index => {\n      const {\n        currentPair\n      } = this.state;\n\n      if (currentPair.length === 2) {\n        return;\n      }\n\n      if (currentPair.length === 0) {\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      }\n\n      this.handleNewPairClosedBy(index);\n    };\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const {\n      currentPair,\n      matchedCardIndices\n    } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  } // Arrow fx for binding\n\n\n  handleNewPairClosedBy(index) {\n    const {\n      cards,\n      currentPair,\n      guesses,\n      matchedCardIndices\n    } = this.state;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({\n      currentPair: newPair,\n      guesses: newGuesses\n    });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const {\n      cards,\n      guesses,\n      matchedCardIndices\n    } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"memory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(GuessCount, {\n      guesses: guesses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }), cards.map((card, index) => /*#__PURE__*/React.createElement(Card, {\n      card: card,\n      feedback: this.getFeedbackForCard(index),\n      key: index,\n      index: index,\n      onClick: this.handleCardClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(HighScoreInput, {\n      guesses: guesses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }), won && /*#__PURE__*/React.createElement(HallOfFame, {\n      entries: FAKE_HOF,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Nabil/Documents/Fullstack/ReactJS/cours/formation/memory/src/App.js"],"names":["React","Component","shuffle","Card","GuessCount","HallOfFame","FAKE_HOF","HighScoreInput","SIDE","SYMBOLS","VISUAL_PAUSE_MSECS","App","state","cards","generateCards","currentPair","guesses","matchedCardIndices","handleCardClick","index","length","setState","handleNewPairClosedBy","result","size","candidates","card","pop","push","getFeedbackForCard","indexMatched","includes","newPair","newGuesses","matched","setTimeout","render","won","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\nimport HighScoreInput from './HighScoreInput';\n\nconst SIDE = 6\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n  state = {\n  cards: this.generateCards(),\n  currentPair: [],\n  guesses: 0,\n  matchedCardIndices: [],\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n  \n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n  \n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  // Arrow fx for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair]})\n    }\n    setTimeout(() => this.setState({currentPair: []}), VISUAL_PAUSE_MSECS)\n  }\n\n  render() {\n    const { cards, guesses, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === cards.length\n    return (\n    <div className=\"memory\">\n      <GuessCount guesses={guesses} />\n      {cards.map((card, index) => (\n        <Card card={card} feedback={this.getFeedbackForCard(index)} key={index} index={index} onClick={this.handleCardClick}/>\n      ))}\n      <HighScoreInput guesses={guesses}/>\n      {won && <HallOfFame entries={FAKE_HOF}/>}\n    </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}